---
format:
  html:
    code-fold: true
---

# Ejercicio - Resorte con masa


| M [g] | L [cm] |
| - | - |
|90.8	|12.73|
|181.6|	13.00|
|272.4	|13.03|
|363.2	|13.06|
|454.0	|13.11|
|544.8	|13.34|
|635.6	|13.18|
|726.4	|13.31|
|817.2	|13.87|
|908.0	|13.72|
|998.8	|14.15|
|1089.6	|13.89|
|1180.4	|14.05|
|1271.2	|14.25|
|1362.0|	14.2|
|1452.8	|14.25|
|1543.6	|14.61|
|1634.4	|14.43|
|1725.2	|14.73|




```{python}
from pylab import *
from scipy import stats
import seaborn as sns
from matplotlib import colors

from matplotlib import font_manager as fm, rcParams
import os
mpl.rcParams.update({'font.size': 18, 'text.usetex': True})
mpl.rcParams.update({'axes.linewidth':1.5})
mpl.rcParams.update({'axes.labelsize':'large'})
mpl.rcParams.update({'xtick.major.size':6})
mpl.rcParams.update({'xtick.minor.size':4})
mpl.rcParams.update({'ytick.major.size':6})
mpl.rcParams.update({'ytick.minor.size':4})
mpl.rcParams.update({'xtick.major.width':1.5})
mpl.rcParams.update({'xtick.minor.width':1.0})
mpl.rcParams.update({'ytick.major.width':1.5})
mpl.rcParams.update({'ytick.minor.width':1.0})
mpl.rcParams.update({'legend.frameon':False,'legend.framealpha':0.0})

```

```{python}
# Datos
Datos = array([[90.8,12.73],
[181.6,		13.00],
[272.4,		13.03],
[363.2,		13.06],
[454	,	13.11],
[544.8	,	13.34],
[635.6	,	13.18],
[726.4	,	13.31],
[817.2	,	13.87],
[908	,	13.72],
[998.8	,	14.15],
[1089.6	,	13.89],
[1180.4	,	14.05],
[1271.2	,	14.25],
[1362	,	14.2],
[1452.8	,	14.25],
[1543.6	,	14.61],
[1634.4	,	14.43],
[1725.2	,	14.73]])
Masa = Datos.T[0]
X = Datos.T[1]
```
```{python}
n = len(Masa)
y = X
x = Masa
scatter(x,y)
xlabel("M [g]")
ylabel("L [cm]")
```

```{python}
Sxy = np.sum(x*y)
Sx  = np.sum(x)
Sy  = np.sum(y)
Sxx = np.sum(x*x)
Fac = n*Sxx-Sx*Sx
m   = (n*Sxy-Sx*Sy)/Fac
b   = (Sxx*Sy-Sx*Sxy)/Fac
print ('m = {0:.2E} cm/g'.format(m))
print ('b = {0:.2E} cm'.format(b))
```


```{python}
Sy_mx_b = np.sum( (y-m*x - b)*(y-m*x - b) )
u_m     = np.sqrt(  n*Sy_mx_b/(n-2)/Fac  )
u_b     = np.sqrt( Sxx*Sy_mx_b/(n-2)/Fac )
print ('u(m) = {0:.2e} cm/g'.format(u_m))
print ('u(b) = {0:.2e} cm'.format(u_b))
```

```{python}
g = 9.81*100  # cm/s^2
k = g/m
u_k = (g/m/m)*u_m
print ('k    = {0:.2e} kg/s^2'.format(k/1000))
print ('u(k) = {0:.2e} kg/s^2'.format(u_k/1000))
print ('')
print ('k    = {0:.2f} kg/s^2'.format(k/1000))
print ('u(k) = {0:.7f} kg/s^2'.format(u_k/1000))
```

*Incluyendo valores de error ficticio, sólo para la visualización.*

```{python}
# Valores de error ficticio
xerr = 0.1*10*10*10
yerr = 0.01*10

```

```{python}
fpath = os.path.join("HELVETNL.TTF")
prop  = fm.FontProperties(fname=fpath,size=18)
fname = os.path.split(fpath)[1]
```

```{python}
fig,axes = plt.subplots(ncols=2,nrows=1,figsize=(13,6))

xline = np.linspace(0,x.max(),400)
yline = m*xline + b


axes[0].set_title(r'Resorte: Elongaci\'on vs Masa (incertidumbre ficticia)',fontproperties=prop)

axes[0].errorbar(x,y,xerr=xerr,yerr=yerr ,fmt='o',mfc='none',ms=10,
                  elinewidth=1,capthick=1,ecolor='b',zorder=2,
                  markeredgecolor='b',dash_capstyle='round',capsize=2,label=r'Datos')

linelabel = r'$k = ({0:.0f}\pm{1:.0f})$'.format(k/1000,u_k/1000)+r'$\;{\rm N/m}$'

axes[0].plot(xline,yline,c='red',lw=3,label=linelabel,zorder=1)

axes[0].set_xlabel('Masa ('+r'${\rm g}$'+')',fontproperties=prop)
axes[0].set_ylabel(r'Elongaci\'on ('+r'${\rm cm}$'+')',fontproperties=prop)

axes[0].legend()

#############################

axes[1].set_title(r'Resorte: Elongaci\'on vs Masa',fontproperties=prop)

axes[1].scatter(x,y,facecolors='none',edgecolors='b',s=100,lw=1.0,zorder=2,label='Datos')
axes[1].plot(xline,yline,c='red',lw=3,zorder=1,label=linelabel)

axes[1].set_xlabel('Masa ('+r'${\rm g}$'+')',fontproperties=prop)
axes[1].set_ylabel(r'Elongaci\'on ('+r'${\rm cm}$'+')',fontproperties=prop)


axes[1].tick_params(axis='both',direction='inout',which='both')

axes[1].legend()

fig.tight_layout()

# fig.savefig('AjusteLineal.pdf',dpi=150)
```